window["module"]("Списки и массивы");

// перестановка списка это другой список с такими же элементами, только в другом порядке
// возвращает True, если аргументы являются перестановками друг друга
function isPermutation(list1, list2) {
    // здесь должен быть ваш код
}

test("Перестановки", function() {
    equal(isPermutation([1, 2, 1], [2, 1, 1]), true);
    equal(isPermutation([1, 2, 1], [2, 2, 1]), false);
});

// возвращает True, если аргумент является отсортированным списком
function isSorted(list1, list2) {
    // здесь должен быть ваш код
}

test("Сортированный список", function () {
    equal(isSorted([1, 2, 3, 4, 5, 6, 7]), true);
    equal(isSorted([1, 2, 3, 2, 4]), false);
});

// 1
// 1 1
// 1 2 1
// 1  3 3  1
// 1 4  6  4 1
// 1 5 10 10 5 1
// .............

// Первая строка - 1.
// Элементы каждая последующая строка получаются сложением элементов предыдущей строки + добавляются по 1 в начало и конец.
// Вычисляет n-ную строку треугольника Паскаля
function pascal(n) {
    // здесь должен быть ваш код
}

test("Треугольник Паскаля", function () {
    equal(pascal(4), [1, 3, 3, 1]);
});

// Сито Эратосфена (алгоритм нахождения простых чисел).
// Берут числа от 2 до end, где start - простое число
// Находят числа, которые делятся на первое простое число
// Находят ближайшее к первому простое число
// Находят числа, которые делятся на второе простое число
// Повторяют, пока не классифицируют все числа
// требование: использовать вспомогательную функцию, которая определяет числа, которые делятся на заданное
function sieve(end) {
    // здесь должен быть ваш код
}

test("Сито Эратосфена", function () {
    equal(sieve(100), [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);
});
